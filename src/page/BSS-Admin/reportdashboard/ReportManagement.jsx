import React, { useState } from "react";
import AdminLayout from "../component/AdminLayout";
import { showSuccess, showInfo, showWarning } from "../../../utils/toast";

const AdminReportManagement = () => {
  // State cho b√°o c√°o
  const [selectedReport, setSelectedReport] = useState("revenue");
  const [dateRange, setDateRange] = useState({
    from: "01/01/2024",
    to: "31/01/2024",
  });

  // D·ªØ li·ªáu b√°o c√°o doanh thu
  const revenueData = {
    totalRevenue: 2500000000,
    monthlyGrowth: 15.5,
    dailyAverage: 8064516,
    topStations: [
      {
        stationId: "BSS-001",
        name: "Tr·∫°m Qu·∫≠n 1",
        revenue: 62500000,
        transactions: 1250,
      },
      {
        stationId: "BSS-002",
        name: "Tr·∫°m Qu·∫≠n 2",
        revenue: 94500000,
        transactions: 1890,
      },
      {
        stationId: "BSS-003",
        name: "Tr·∫°m Qu·∫≠n 3",
        revenue: 49000000,
        transactions: 980,
      },
    ],
    dailyRevenue: [
      { date: "01/01/2024", revenue: 7500000, transactions: 150 },
      { date: "02/01/2024", revenue: 8200000, transactions: 164 },
      { date: "03/01/2024", revenue: 9100000, transactions: 182 },
      { date: "04/01/2024", revenue: 8800000, transactions: 176 },
      { date: "05/01/2024", revenue: 9500000, transactions: 190 },
    ],
  };

  // D·ªØ li·ªáu b√°o c√°o t·∫ßn su·∫•t ƒë·ªïi pin
  const frequencyData = {
    totalSwaps: 15680,
    averageSwapsPerUser: 6.3,
    peakHours: [
      { hour: "07:00-09:00", swaps: 1250, percentage: 8.0 },
      { hour: "12:00-14:00", swaps: 1890, percentage: 12.1 },
      { hour: "17:00-19:00", swaps: 2340, percentage: 14.9 },
      { hour: "19:00-21:00", swaps: 2100, percentage: 13.4 },
    ],
    batteryTypes: [
      { type: "Battery A - 5000mAh", swaps: 6280, percentage: 40.1 },
      { type: "Battery B - 3000mAh", swaps: 4704, percentage: 30.0 },
      { type: "Battery C - 7000mAh", swaps: 4696, percentage: 29.9 },
    ],
  };

  // D·ªØ li·ªáu b√°o c√°o s·ª©c kh·ªèe pin
  const batteryHealthData = {
    averageHealth: 85.2,
    healthDistribution: [
      { range: "90-100%", count: 1200, percentage: 40.0 },
      { range: "80-89%", count: 900, percentage: 30.0 },
      { range: "70-79%", count: 600, percentage: 20.0 },
      { range: "60-69%", count: 240, percentage: 8.0 },
      { range: "<60%", count: 60, percentage: 2.0 },
    ],
    maintenanceNeeded: 45,
    replacementNeeded: 12,
  };

  // D·ªØ li·ªáu b√°o c√°o kh√°ch h√†ng
  const customerData = {
    totalCustomers: 2500,
    activeCustomers: 2100,
    newCustomers: 150,
    customerRetention: 84.0,
    averageSpending: 1000000,
    topCustomers: [
      { name: "Nguy·ªÖn VƒÉn A", transactions: 45, spending: 2250000 },
      { name: "Tr·∫ßn Th·ªã B", transactions: 38, spending: 1900000 },
      { name: "L√™ VƒÉn C", transactions: 32, spending: 1600000 },
    ],
  };

  // H√†m xu·∫•t b√°o c√°o
  const exportReport = (format) => {
    showSuccess(`ƒêang xu·∫•t b√°o c√°o ${selectedReport} ƒë·ªãnh d·∫°ng ${format}...`);
    // Simulate export process
    setTimeout(() => {
      showSuccess(`ƒê√£ xu·∫•t b√°o c√°o ${selectedReport} th√†nh c√¥ng!`);
    }, 2000);
  };

  // H√†m t·∫°o b√°o c√°o t√πy ch·ªânh
  const generateCustomReport = () => {
    showInfo("ƒêang t·∫°o b√°o c√°o t√πy ch·ªânh...");
    // Simulate custom report generation
    setTimeout(() => {
      showSuccess("B√°o c√°o t√πy ch·ªânh ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
    }, 1500);
  };

  return (
    <AdminLayout>
      <div className="p-5 bg-gray-50 min-h-screen font-sans">
        {/* Header */}
        <div className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white p-6 rounded-lg mb-8 flex justify-between items-center shadow-lg">
          <div>
            <h1 className="text-3xl font-semibold m-0">B√°o c√°o & Th·ªëng k√™</h1>
            <p className="text-indigo-100 mt-2">
              Ph√¢n t√≠ch v√† b√°o c√°o hi·ªáu su·∫•t h·ªá th·ªëng tr·∫°m ƒë·ªïi pin
            </p>
          </div>
          <div className="flex flex-col items-end gap-2">
            <span className="bg-white bg-opacity-20 px-4 py-1 rounded-full text-sm">
              Admin: Qu·∫£n tr·ªã h·ªá th·ªëng
            </span>
            <span className="bg-white bg-opacity-20 px-4 py-1 rounded-full text-sm">
              K·ª≥ b√°o c√°o: {dateRange.from} - {dateRange.to}
            </span>
          </div>
        </div>

        {/* Date Range v√† Report Type */}
        <div className="mb-8 bg-white p-6 rounded-lg shadow-md">
          <div className="flex flex-wrap gap-4 items-center justify-between">
            <div className="flex gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  T·ª´ ng√†y:
                </label>
                <input
                  type="date"
                  value={dateRange.from}
                  onChange={(e) =>
                    setDateRange({ ...dateRange, from: e.target.value })
                  }
                  className="p-2 border border-gray-300 rounded-md"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  ƒê·∫øn ng√†y:
                </label>
                <input
                  type="date"
                  value={dateRange.to}
                  onChange={(e) =>
                    setDateRange({ ...dateRange, to: e.target.value })
                  }
                  className="p-2 border border-gray-300 rounded-md"
                />
              </div>
            </div>
            <div className="flex gap-2">
              <button
                onClick={() => exportReport("PDF")}
                className="bg-red-500 text-white py-2 px-4 rounded-md hover:bg-red-600"
              >
                üìÑ Xu·∫•t PDF
              </button>
              <button
                onClick={() => exportReport("Excel")}
                className="bg-green-500 text-white py-2 px-4 rounded-md hover:bg-green-600"
              >
                üìä Xu·∫•t Excel
              </button>
              <button
                onClick={generateCustomReport}
                className="bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600"
              >
                ‚öôÔ∏è B√°o c√°o t√πy ch·ªânh
              </button>
            </div>
          </div>
        </div>

        {/* Report Type Tabs */}
        <div className="mb-6">
          <div className="flex space-x-1 bg-gray-200 p-1 rounded-lg w-fit">
            <button
              onClick={() => setSelectedReport("revenue")}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                selectedReport === "revenue"
                  ? "bg-white text-gray-900 shadow-sm"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              üí∞ Doanh thu
            </button>
            <button
              onClick={() => setSelectedReport("frequency")}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                selectedReport === "frequency"
                  ? "bg-white text-gray-900 shadow-sm"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              üìà T·∫ßn su·∫•t ƒë·ªïi pin
            </button>
            <button
              onClick={() => setSelectedReport("battery")}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                selectedReport === "battery"
                  ? "bg-white text-gray-900 shadow-sm"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              üîã S·ª©c kh·ªèe pin
            </button>
            <button
              onClick={() => setSelectedReport("customer")}
              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${
                selectedReport === "customer"
                  ? "bg-white text-gray-900 shadow-sm"
                  : "text-gray-600 hover:text-gray-900"
              }`}
            >
              üë• Kh√°ch h√†ng
            </button>
          </div>
        </div>

        {/* B√°o c√°o Doanh thu */}
        {selectedReport === "revenue" && (
          <div className="space-y-8">
            {/* T·ªïng quan doanh thu */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">
                T·ªïng quan doanh thu
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-3xl font-bold text-green-600">
                    {(revenueData.totalRevenue / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-green-700">T·ªïng doanh thu</div>
                </div>
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-3xl font-bold text-blue-600">
                    +{revenueData.monthlyGrowth}%
                  </div>
                  <div className="text-sm text-blue-700">TƒÉng tr∆∞·ªüng th√°ng</div>
                </div>
                <div className="text-center p-4 bg-purple-50 rounded-lg">
                  <div className="text-3xl font-bold text-purple-600">
                    {(revenueData.dailyAverage / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-purple-700">Trung b√¨nh/ng√†y</div>
                </div>
                <div className="text-center p-4 bg-orange-50 rounded-lg">
                  <div className="text-3xl font-bold text-orange-600">
                    {revenueData.topStations.length}
                  </div>
                  <div className="text-sm text-orange-700">Tr·∫°m ho·∫°t ƒë·ªông</div>
                </div>
              </div>
            </div>

            {/* Top tr·∫°m doanh thu */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">Top tr·∫°m doanh thu</h2>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse bg-white rounded-lg overflow-hidden">
                  <thead>
                    <tr className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white">
                      <th className="p-4 text-left font-semibold text-base">
                        Tr·∫°m
                      </th>
                      <th className="p-4 text-left font-semibold text-base">
                        Doanh thu
                      </th>
                      <th className="p-4 text-left font-semibold text-base">
                        Giao d·ªãch
                      </th>
                      <th className="p-4 text-left font-semibold text-base">
                        Trung b√¨nh/GD
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {revenueData.topStations.map((station, index) => (
                      <tr
                        key={station.stationId}
                        className={`hover:bg-indigo-50 transition-colors duration-200 ${
                          index % 2 === 0 ? "bg-gray-50" : "bg-white"
                        }`}
                      >
                        <td className="p-4 border-b border-gray-200">
                          <div>
                            <div className="font-bold text-base text-indigo-600">
                              {station.stationId}
                            </div>
                            <div className="text-sm text-gray-600 mt-1">
                              {station.name}
                            </div>
                          </div>
                        </td>
                        <td className="p-4 border-b border-gray-200">
                          <div className="font-bold text-base text-green-600">
                            {(station.revenue / 1000000).toFixed(1)}M VNƒê
                          </div>
                        </td>
                        <td className="p-4 border-b border-gray-200">
                          <div className="font-semibold text-base text-gray-800">
                            {station.transactions.toLocaleString("vi-VN")}
                          </div>
                        </td>
                        <td className="p-4 border-b border-gray-200">
                          <div className="font-semibold text-base text-gray-800">
                            {(
                              station.revenue / station.transactions
                            ).toLocaleString("vi-VN")}{" "}
                            VNƒê
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            {/* Bi·ªÉu ƒë·ªì doanh thu theo ng√†y */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">
                Doanh thu theo ng√†y
              </h2>
              <div className="space-y-3">
                {revenueData.dailyRevenue.map((day) => (
                  <div
                    key={day.date}
                    className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                  >
                    <div className="font-medium">{day.date}</div>
                    <div className="flex items-center gap-4">
                      <div className="text-sm text-gray-600">
                        {day.transactions} giao d·ªãch
                      </div>
                      <div className="font-bold text-green-600">
                        {(day.revenue / 1000000).toFixed(1)}M VNƒê
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* B√°o c√°o T·∫ßn su·∫•t ƒë·ªïi pin */}
        {selectedReport === "frequency" && (
          <div className="space-y-8">
            {/* T·ªïng quan t·∫ßn su·∫•t */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">
                T·ªïng quan t·∫ßn su·∫•t ƒë·ªïi pin
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-3xl font-bold text-blue-600">
                    {frequencyData.totalSwaps.toLocaleString("vi-VN")}
                  </div>
                  <div className="text-sm text-blue-700">T·ªïng l∆∞·ª£t ƒë·ªïi pin</div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-3xl font-bold text-green-600">
                    {frequencyData.averageSwapsPerUser}
                  </div>
                  <div className="text-sm text-green-700">TB/kh√°ch h√†ng</div>
                </div>
                <div className="text-center p-4 bg-purple-50 rounded-lg">
                  <div className="text-3xl font-bold text-purple-600">
                    {frequencyData.peakHours.length}
                  </div>
                  <div className="text-sm text-purple-700">Gi·ªù cao ƒëi·ªÉm</div>
                </div>
              </div>
            </div>

            {/* Gi·ªù cao ƒëi·ªÉm */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">Gi·ªù cao ƒëi·ªÉm</h2>
              <div className="space-y-3">
                {frequencyData.peakHours.map((hour, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                  >
                    <div className="font-medium">{hour.hour}</div>
                    <div className="flex items-center gap-4">
                      <div className="text-sm text-gray-600">
                        {hour.percentage}%
                      </div>
                      <div className="font-bold text-blue-600">
                        {hour.swaps.toLocaleString("vi-VN")} l∆∞·ª£t
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Lo·∫°i pin ph·ªï bi·∫øn */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">Lo·∫°i pin ph·ªï bi·∫øn</h2>
              <div className="space-y-3">
                {frequencyData.batteryTypes.map((battery, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                  >
                    <div className="font-medium">{battery.type}</div>
                    <div className="flex items-center gap-4">
                      <div className="text-sm text-gray-600">
                        {battery.percentage}%
                      </div>
                      <div className="font-bold text-green-600">
                        {battery.swaps.toLocaleString("vi-VN")} l∆∞·ª£t
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* B√°o c√°o S·ª©c kh·ªèe pin */}
        {selectedReport === "battery" && (
          <div className="space-y-8">
            {/* T·ªïng quan s·ª©c kh·ªèe pin */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">
                T·ªïng quan s·ª©c kh·ªèe pin
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-3xl font-bold text-green-600">
                    {batteryHealthData.averageHealth}%
                  </div>
                  <div className="text-sm text-green-700">S·ª©c kh·ªèe TB</div>
                </div>
                <div className="text-center p-4 bg-yellow-50 rounded-lg">
                  <div className="text-3xl font-bold text-yellow-600">
                    {batteryHealthData.maintenanceNeeded}
                  </div>
                  <div className="text-sm text-yellow-700">C·∫ßn b·∫£o d∆∞·ª°ng</div>
                </div>
                <div className="text-center p-4 bg-red-50 rounded-lg">
                  <div className="text-3xl font-bold text-red-600">
                    {batteryHealthData.replacementNeeded}
                  </div>
                  <div className="text-sm text-red-700">C·∫ßn thay th·∫ø</div>
                </div>
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-3xl font-bold text-blue-600">
                    {batteryHealthData.healthDistribution.reduce(
                      (sum, item) => sum + item.count,
                      0
                    )}
                  </div>
                  <div className="text-sm text-blue-700">T·ªïng pin</div>
                </div>
              </div>
            </div>

            {/* Ph√¢n b·ªë s·ª©c kh·ªèe pin */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">
                Ph√¢n b·ªë s·ª©c kh·ªèe pin
              </h2>
              <div className="space-y-3">
                {batteryHealthData.healthDistribution.map((item, index) => (
                  <div
                    key={index}
                    className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                  >
                    <div className="font-medium">{item.range}</div>
                    <div className="flex items-center gap-4">
                      <div className="text-sm text-gray-600">
                        {item.percentage}%
                      </div>
                      <div className="font-bold text-blue-600">
                        {item.count.toLocaleString("vi-VN")} pin
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* B√°o c√°o Kh√°ch h√†ng */}
        {selectedReport === "customer" && (
          <div className="space-y-8">
            {/* T·ªïng quan kh√°ch h√†ng */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">
                T·ªïng quan kh√°ch h√†ng
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                <div className="text-center p-4 bg-blue-50 rounded-lg">
                  <div className="text-3xl font-bold text-blue-600">
                    {customerData.totalCustomers.toLocaleString("vi-VN")}
                  </div>
                  <div className="text-sm text-blue-700">T·ªïng kh√°ch h√†ng</div>
                </div>
                <div className="text-center p-4 bg-green-50 rounded-lg">
                  <div className="text-3xl font-bold text-green-600">
                    {customerData.activeCustomers.toLocaleString("vi-VN")}
                  </div>
                  <div className="text-sm text-green-700">ƒêang ho·∫°t ƒë·ªông</div>
                </div>
                <div className="text-center p-4 bg-purple-50 rounded-lg">
                  <div className="text-3xl font-bold text-purple-600">
                    {customerData.customerRetention}%
                  </div>
                  <div className="text-sm text-purple-700">T·ª∑ l·ªá gi·ªØ ch√¢n</div>
                </div>
                <div className="text-center p-4 bg-orange-50 rounded-lg">
                  <div className="text-3xl font-bold text-orange-600">
                    {(customerData.averageSpending / 1000000).toFixed(1)}M
                  </div>
                  <div className="text-sm text-orange-700">Chi ti√™u TB</div>
                </div>
              </div>
            </div>

            {/* Top kh√°ch h√†ng */}
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h2 className="text-xl font-semibold mb-4">Top kh√°ch h√†ng</h2>
              <div className="overflow-x-auto">
                <table className="w-full border-collapse bg-white rounded-lg overflow-hidden">
                  <thead>
                    <tr className="bg-gradient-to-r from-indigo-500 to-purple-600 text-white">
                      <th className="p-4 text-left font-semibold text-base">
                        Kh√°ch h√†ng
                      </th>
                      <th className="p-4 text-left font-semibold text-base">
                        Giao d·ªãch
                      </th>
                      <th className="p-4 text-left font-semibold text-base">
                        T·ªïng chi ti√™u
                      </th>
                      <th className="p-4 text-left font-semibold text-base">
                        Chi ti√™u TB
                      </th>
                    </tr>
                  </thead>
                  <tbody>
                    {customerData.topCustomers.map((customer, index) => (
                      <tr
                        key={index}
                        className={`hover:bg-indigo-50 transition-colors duration-200 ${
                          index % 2 === 0 ? "bg-gray-50" : "bg-white"
                        }`}
                      >
                        <td className="p-4 border-b border-gray-200">
                          <div className="font-bold text-base text-gray-800">
                            {customer.name}
                          </div>
                        </td>
                        <td className="p-4 border-b border-gray-200">
                          <div className="font-semibold text-base text-gray-800">
                            {customer.transactions}
                          </div>
                        </td>
                        <td className="p-4 border-b border-gray-200">
                          <div className="font-bold text-base text-green-600">
                            {(customer.spending / 1000000).toFixed(1)}M VNƒê
                          </div>
                        </td>
                        <td className="p-4 border-b border-gray-200">
                          <div className="font-semibold text-base text-gray-800">
                            {(
                              customer.spending / customer.transactions
                            ).toLocaleString("vi-VN")}{" "}
                            VNƒê
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
};

export default AdminReportManagement;
